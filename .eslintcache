[{"C:\\Users\\Stephanie\\workspace\\capstone\\src\\index.js":"1","C:\\Users\\Stephanie\\workspace\\capstone\\src\\reportWebVitals.js":"2","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\PropsAndState.js":"3","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatsProvider.js":"4","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatsList.js":"5","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatCard.js":"6","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Capstone.js":"7","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\auth\\Login.js":"8","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\ApplicationViews.js":"9","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Home.js":"10","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\auth\\Register.js":"11","C:\\Users\\Stephanie\\workspace\\capstone\\src\\Home.js":"12","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatForm.js":"13","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatDetails.js":"14"},{"size":487,"mtime":1612196769780,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1611956400733,"results":"17","hashOfConfig":"16"},{"size":170,"mtime":1611956400730,"results":"18","hashOfConfig":"16"},{"size":1504,"mtime":1612192261823,"results":"19","hashOfConfig":"16"},{"size":1179,"mtime":1612192261821,"results":"20","hashOfConfig":"16"},{"size":369,"mtime":1612192261819,"results":"21","hashOfConfig":"16"},{"size":716,"mtime":1612195752641,"results":"22","hashOfConfig":"16"},{"size":2229,"mtime":1612196854995,"results":"23","hashOfConfig":"16"},{"size":864,"mtime":1612196982179,"results":"24","hashOfConfig":"16"},{"size":289,"mtime":1612195112878,"results":"25","hashOfConfig":"16"},{"size":3206,"mtime":1612192770541,"results":"26","hashOfConfig":"16"},{"size":276,"mtime":1612192261847,"results":"27","hashOfConfig":"16"},{"size":6072,"mtime":1612192261821,"results":"28","hashOfConfig":"16"},{"size":1349,"mtime":1612192261820,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1akukpu",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"37"},"C:\\Users\\Stephanie\\workspace\\capstone\\src\\index.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\reportWebVitals.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\PropsAndState.js",["65"],"import React, { useState } from \"react\"\r\n\r\nexport const PropsAndState = ({ yourName }) => {\r\n \r\n\r\n  return (\r\n    <>\r\n      <h3>Welcome, {yourName} </h3>\r\n    </>\r\n  )\r\n}",["66","67"],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatsProvider.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatsList.js",["68","69"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { CatCard } from \"./CatCard\"\r\nimport { CatContext } from \"./CatsProvider\"\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\n\r\n\r\nexport const CatList = () => {\r\n\r\n\r\n\r\n    const { cats, getCats } = useContext(CatContext)\r\n    // const history = useHistory()\r\n\r\n    //useEffect - reach out to the world for something\r\n    useEffect(() => {\r\n        console.log(\"CatList: Initial render before data\")\r\n        getCats()\r\n    }, [])\r\n\r\n\r\n\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <>\r\n        <h2>Cats</h2>\r\n        <Button color=\"info\"on onClick={() => {history.push(\"/cats/create\")}}>\r\n            Add A Cat\r\n            </Button>{' '}\r\n                   \r\n        <div className=\"cats\">\r\n            {console.log(\"CatList: Render\", cats)}\r\n            {\r\n                cats.map(cat => {\r\n                    return <CatCard key={cat.id} cat={cat} />\r\n                })\r\n            }\r\n        </div>\r\n    \r\n    </>\r\n    )\r\n}\r\n// {\r\n//     animals.map(animal => {\r\n//         return <AnimalCard key={animal.id} animal={animal} />\r\n//     })\r\n// }\r\n\r\n","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatCard.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Capstone.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\auth\\Login.js",["70"],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\ApplicationViews.js",["71"],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Home.js",[],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\auth\\Register.js",["72"],"import React, { useRef } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport \"./Login.css\"\r\n\r\nexport const Register = (props) => {\r\n    const firstName = useRef()\r\n    const lastName = useRef()\r\n    const email = useRef()\r\n    const verifyPassword = useRef()\r\n    const conflictDialog = useRef()\r\n    const history = useHistory()\r\n\r\n    const existingUserCheck = () => {\r\n        return fetch(`http://localhost:8088/users?email=${email.current.value}`)\r\n            .then(res => res.json())\r\n            .then(user => !!user.length)\r\n    }\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault()\r\n\r\n\r\n        existingUserCheck()\r\n            .then((userExists) => {\r\n                if (!userExists) {\r\n                    fetch(\"http://localhost:8088/users\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify({\r\n                            email: email.current.value,\r\n                            name: `${firstName.current.value} ${lastName.current.value}`\r\n                        })\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(createdUser => {\r\n                            if (createdUser.hasOwnProperty(\"id\")) {\r\n                                localStorage.setItem(\"capstone_customer\", createdUser.id)\r\n                                history.push(\"/\")\r\n                            }\r\n                        })\r\n                }\r\n                else {\r\n                    conflictDialog.current.showModal()\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n    return (\r\n        <main style={{ textAlign: \"center\" }}>\r\n\r\n            <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\r\n                <div>Account with that email address already exists</div>\r\n                <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\r\n            </dialog>\r\n\r\n            <form className=\"form--login\" onSubmit={handleRegister}>\r\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please Register for NSS Kennels</h1>\r\n                <fieldset>\r\n                    <label htmlFor=\"firstName\"> First Name </label>\r\n                    <input ref={firstName} type=\"text\" name=\"firstName\" className=\"form-control\" placeholder=\"First name\" required autoFocus />\r\n                </fieldset>\r\n                <fieldset>\r\n                    <label htmlFor=\"lastName\"> Last Name </label>\r\n                    <input ref={lastName} type=\"text\" name=\"lastName\" className=\"form-control\" placeholder=\"Last name\" required />\r\n                </fieldset>\r\n                <fieldset>\r\n                    <label htmlFor=\"inputEmail\"> Email address </label>\r\n                    <input ref={email} type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email address\" required />\r\n                </fieldset>\r\n                <fieldset>\r\n                    <button type=\"submit\"> Sign in </button>\r\n                </fieldset>\r\n            </form>\r\n        </main>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Stephanie\\workspace\\capstone\\src\\Home.js",[],["73","74"],"C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatForm.js",["75","76","77","78","79","80"],"import { Button, Form, FormGroup, Label, Input, FormText, CardText } from 'reactstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport React, { useContext, useEffect, useState } from \"react\"\r\nimport { CatContext } from './CatsProvider';\r\n\r\nexport const CatForm = () => {\r\n    const { addCat, getCatById, updateCat } = useContext(CatContext)\r\n    // const { customers, getCustomers } = useContext(CustomerContext)\r\n\r\n    //for edit, hold on to state of cat in this view\r\n    const [cat, setCat] = useState({\r\n      name: \"\",\r\n      adopted: \"\",\r\n      zip: 0,\r\n      color: \"\",\r\n\r\n    })\r\n\r\n    //wait for data before button is active. Look at the button to see how it's setting itself to disabled or not based on this state\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Now that the form can be used for editing as well as adding an cat, you need access to the cat id for fetching the cat you want to edit\r\n    const { catId } = useParams();\r\n      const history = useHistory();\r\n          // Get customers and locations. If catId is in the URL, getCatById\r\n    useEffect(() => {\r\n        \r\n    \r\n    }, [])\r\n\r\n    const handleControlledInputChange = (event) => {\r\n      const newCat = { ...cat }\r\n      newCat[event.target.id] = event.target.value\r\n      setCat(newCat)\r\n    }\r\n\r\n    const adoption = (event) => {\r\n        const catAdopted = { ... cat }\r\n        let selection = event.target.value\r\n       if  (event.target.name.includes(\"adopted\")) { \r\n           selection = true\r\n    }\r\n    else {\r\n        selection =false\r\n    }\r\n  catAdopted[event.target.id] = selection\r\nsetCat(catAdopted)\r\n    }\r\n\r\n\r\n    const handleAddCat= (event) => {\r\n        \r\n      if (parseInt(cat.zip) === 0) {\r\n          window.alert(\"Please input a zip code\")\r\n      } \r\n     else {\r\n        setIsLoading(true);\r\n        {\r\n            if\r\n                 (parseInt(cat.color) === 0) \r\n              window.alert(\"Please select a description\")\r\n            }\r\n\r\n        if (catId){\r\n          //PUT - update\r\n          updateCat({\r\n              id: cat.id,\r\n              name: cat.name,\r\n              color: cat.color,\r\n              zip: parseInt(cat.zip),\r\n              adopted: cat.value\r\n            //   customerId: parseInt(cat.customerId)\r\n          })\r\n          .then(() => history.push(`/cats/detail/${cat.id}`))\r\n        }else {\r\n          //POST - add\r\n          addCat({\r\n            id: cat.id,\r\n            name: cat.name,\r\n            color: cat.color,\r\n            zip: parseInt(cat.zip),\r\n            adopted: cat.adopted\r\n          //   customerId: parseInt(cat.customerId)\r\n          })\r\n          .then(() => history.push(\"/cats\"))\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    // // Get customers and locations. If catId is in the URL, getCatById\r\n    // useEffect(() => {\r\n        \r\n    // //   getCustomers().then(getLocations).then(() => {\r\n    //     if (catId) {\r\n    //       getCatById(catId)\r\n    //       .then(cat => {\r\n    //           setCat(cat)\r\n    //           setIsLoading(false)\r\n    //       })\r\n    //     } else {\r\n    //       setIsLoading(false)\r\n    //     }\r\n      \r\n    // }, [])\r\n// export const CatForm = (cat) => {\r\n  return (\r\n    <Form>\r\n      <FormGroup>\r\n        <Label for=\"newCatName\">Name</Label>\r\n        <Input type=\"text\" name=\"catName\" id=\"name\"onChange={handleControlledInputChange}  required autoFocus className=\"form-control\"placeholder=\"Name of Furry Friend\"value={cat.name} />\r\n  \r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"zip\">Zip Code</Label>\r\n        <Input type=\"text\" name=\"zip\" id=\"zip\"onChange={handleControlledInputChange}  required autoFocus className=\"form-control\" placeholder=\"Zip Code of Cat\"   value = {cat.zip}/>\r\n      \r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"color\">Description</Label>\r\n        <Input type=\"select\" name=\"color\" id=\"color\"onChange={handleControlledInputChange}  required autoFocus className=\"form-control\" placeholder=\" Color of Cat\" value = {cat.color}  >\r\n        <option value = \"null\" >Please Select a Color</option>\r\n          <option >Orange</option>\r\n          <option>Yellow</option>\r\n          <option>Gray</option>\r\n          <option>Black</option>\r\n          <option>White</option>\r\n          <option>Brown</option>\r\n          <option>Calico</option>\r\n          <option>Striped</option>\r\n\r\n\r\n        </Input>\r\n      </FormGroup>\r\n    \r\n    \r\n      {/* <FormGroup>\r\n        <Label for=\"exampleFile\">File</Label>\r\n        <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\r\n        <FormText color=\"muted\">\r\n          This is some placeholder block-level help text for the above input.\r\n          It's a bit lighter and easily wraps to a new line.\r\n        </FormText>\r\n      </FormGroup> */}\r\n      <FormGroup tag=\"fieldset\">\r\n        <legend>Radio Buttons</legend>\r\n        <FormGroup check>\r\n          <Label check>  \r\n            <Input type=\"radio\" name=\"adopted\" id=\"adopted\"onChange={adoption} value={cat.adopted}  />{' '} \r\n            Do you take this cat to be yours for better or worse as long as you both shall live...in this neighborhood?\r\n            </Label>\r\n        </FormGroup>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input type=\"radio\" name=\"not\" id=\"adopted\"onChange={adoption} value={cat.adopted} />{' '}\r\n            This furry friend is in need of a home\r\n          </Label>\r\n        </FormGroup>\r\n        <FormGroup check disabled>\r\n          {/* <Label check>\r\n            <Input type=\"radio\" name=\"radio1\" disabled />{' '}\r\n            Option three is disabled\r\n          </Label> */}\r\n        </FormGroup>         idk if this cat has a home or not?\r\n      </FormGroup>\r\n   <div>\r\n      <Button\r\n      className=\"btn btn-primary\"\r\n        //   disabled={isLoading}\r\n          onClick={event => {\r\n            // event.preventDefault() // Prevent browser from submitting the form and refreshing the page\r\n            handleAddCat()\r\n          }}>{catId ? \"Save Cat\" : \"Add Cat\"}</Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\n// export default Example;","C:\\Users\\Stephanie\\workspace\\capstone\\src\\components\\Cats\\CatDetails.js",["81"],"import React, { useContext, useEffect, useState } from \"react\"\r\nimport { Button,} from 'reactstrap';\r\nimport { useParams, useHistory } from \"react-router-dom\"\r\nimport { CatContext } from \"./CatsProvider\"\r\n\r\nexport const CatDetail = () => {\r\n  const { getCatById, deleteCat } = useContext(CatContext)\r\n\r\n\tconst [cat, setCat] = useState({})\r\n\r\n\tconst {catId} = useParams();\r\n    \r\n    useEffect(() => {\r\n        console.log(\"useEffect\", catId)\r\n        getCatById(catId)\r\n        .then((response) => {\r\n            setCat(response)\r\n        })\r\n    }, [])\r\n    \r\n\r\n    const history = useHistory();\r\n    \r\n    const handleRelease = () => {\r\n        deleteCat(cat.id)\r\n          .then(() => {\r\n            history.push(\"/cats\")\r\n          })\r\n      }\r\n  return (\r\n    <section className=\"cat\">\r\n      <h3 className=\"cat__name\">{cat.name}</h3>\r\n      <div className=\"cat__color\">{cat?.color}</div>\r\n      <div className=\"cat__zip\">Location: {cat.zip}</div>\r\n      {/* <div className=\"cat__adopter\">Customer: {cat?.adopterId}</div> */}\r\n      <div>\r\n      <Button\r\n      className=\"btn btn-primary\"\r\n        //   disabled={isLoading}\r\n        onClick={handleRelease}>Delete Cat</Button>\r\n        {/* <Button\r\n         onClick={() => {\r\n            history.push(`/cats/edit/${cat.id}`)\r\n          }}>Edit</Button> */}\r\n      </div>\r\n    </section>\r\n  )\r\n}",{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":40,"nodeType":"84","messageId":"85","endLine":1,"endColumn":48},{"ruleId":"90","severity":1,"message":"91","line":21,"column":8,"nodeType":"92","endLine":21,"endColumn":10,"suggestions":"93"},{"ruleId":"82","severity":1,"message":"94","line":9,"column":11,"nodeType":"84","messageId":"85","endLine":9,"endColumn":19},{"ruleId":"82","severity":1,"message":"95","line":7,"column":10,"nodeType":"84","messageId":"85","endLine":7,"endColumn":14},{"ruleId":"82","severity":1,"message":"96","line":9,"column":11,"nodeType":"84","messageId":"85","endLine":9,"endColumn":25},{"ruleId":"86","replacedBy":"97"},{"ruleId":"88","replacedBy":"98"},{"ruleId":"82","severity":1,"message":"99","line":1,"column":49,"nodeType":"84","messageId":"85","endLine":1,"endColumn":57},{"ruleId":"82","severity":1,"message":"100","line":1,"column":59,"nodeType":"84","messageId":"85","endLine":1,"endColumn":67},{"ruleId":"82","severity":1,"message":"101","line":7,"column":21,"nodeType":"84","messageId":"85","endLine":7,"endColumn":31},{"ruleId":"82","severity":1,"message":"102","line":20,"column":12,"nodeType":"84","messageId":"85","endLine":20,"endColumn":21},{"ruleId":"103","severity":1,"message":"104","line":38,"column":33,"nodeType":"105","messageId":"106","endLine":38,"endColumn":34,"fix":"107"},{"ruleId":"108","severity":1,"message":"109","line":58,"column":9,"nodeType":"110","messageId":"111","endLine":62,"endColumn":14},{"ruleId":"90","severity":1,"message":"112","line":19,"column":8,"nodeType":"92","endLine":19,"endColumn":10,"suggestions":"113"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCats'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'password' is assigned a value but never used.","'Home' is defined but never used.","'verifyPassword' is assigned a value but never used.",["114"],["115"],"'FormText' is defined but never used.","'CardText' is defined but never used.","'getCatById' is assigned a value but never used.","'isLoading' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"117","text":"118"},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'catId' and 'getCatById'. Either include them or remove the dependency array.",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},[1387,1388],"",{"desc":"122","fix":"123"},"Update the dependencies array to be: [getCats]",{"range":"124","text":"125"},"Update the dependencies array to be: [catId, getCatById]",{"range":"126","text":"127"},[535,537],"[getCats]",[550,552],"[catId, getCatById]"]